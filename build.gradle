import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat

// =====================================================================================================================
// REPOS
// =====================================================================================================================

buildscript {
    ext.kotlin_version = '1.0.1-2'
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // lookup the most recent version here: http://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-gradle-plugin
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "gradle.plugin.edu.sc.seis:macAppBundle:2.1.1"
    }
}

repositories {
    mavenCentral()
    maven {
        url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/"
    }
}


// =====================================================================================================================
// MISC
// =====================================================================================================================

ext {
    projectVersion = '1.0.0-SNAPSHOT'
    myMainClassName = 'at.cpickl.gadsu.GadsuApp'
    myAppName = 'Gadsu'
}

version = projectVersion

apply plugin: "kotlin"

defaultTasks 'run'

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

// =====================================================================================================================
// DEPENDENCIES
// =====================================================================================================================

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.google.inject:guice:4.0'
    compile 'com.google.guava:guava:18.0' // guice comes with 16.0.1
    compile 'joda-time:joda-time:2.8.1'

    // compile 'org.java.net.substance:substance:6.0'

    // DB
    compile 'org.hsqldb:hsqldb:2.3.3'
    // http://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html_single/
    // compile 'org.hibernate:hibernate-core:4.3.10.Final'
    // compile 'org.hibernate:hibernate-entitymanager:4.3.10.Final'
    // compile 'org.hibernate.common:hibernate-commons-annotations:4.0.5.Final'
    // compile 'org.hibernate.common:hibernate-commons-annotations:5.0.0.Final'

    // logging
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'ch.qos.logback:logback-core:1.1.3'
    compile 'ch.qos.logback:logback-classic:1.1.3'

    // jasper PDF
    compile 'net.sf.jasperreports:jasperreports:6.1.0'
    compile 'com.lowagie:itext:2.1.7'

    // test
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'// testng comes with hamcrest-core 1.1 via junit; must be ABOVE
    testCompile('org.testng:testng:6.9.6')/* {
        exclude module: 'junit'
    }*/
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile(group: 'org.uispec4j', name: 'uispec4j', version: '2.5-RC1', classifier: 'jdk8')
}

// =====================================================================================================================
// PACKAGING
// =====================================================================================================================

processResources {
    from('src/main/resources') {
        include '**/metainf.properties'
        filter ReplaceTokens, tokens: [
                "application.version": projectVersion,
                "built.date"         : new SimpleDateFormat("dd.MM.yyyy HH:mm").format(new Date())
        ]
    }
}

jar {
    manifest {
        // splashscreen-image manifest entry must be in "main JAR" file
        // java -jar is going to ignore -classpath option
        //   => either fat-jar, or reference other lib-jars in manifest
        attributes 'Implementation-Title': 'MyShiatsu',
                'Implementation-Version': projectVersion,
                'Main-Class': myMainClassName, // actually not necessary
                'SplashScreen-Image': "gadsu/splashscreen.jpg",
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version')
    }
    /* TODO FAT JAR: wenn das machen, dann andere libs in mac app rausnehmen
    dependsOn configurations.runtime
    from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    */
}


// =====================================================================================================================
// PACKAGING MAC
// =====================================================================================================================

// NOPE!
//apply plugin: 'application'
//mainClassName = myMainClassName
// applicationDefaultJvmArgs = ["-Dfoo=bar"]

// https://github.com/crotwell/gradle-macappbundle
// https://github.com/crotwell/gradle-macappbundle/wiki/Intro
apply plugin: 'edu.sc.seis.macAppBundle'
// gradle createApp or gradle createDmg
macAppBundle {
    appName = myAppName
    dmgName = myAppName + "-" + projectVersion

    mainClassName = myMainClassName
    icon = "src/main/buildMac/logo.icns"
    jvmVersion = "1.8+"

    javaProperties.put("apple.laf.useScreenMenuBar", "true")
    javaProperties.put("gadsu.isMacApp", "true")

    // http://alvinalexander.com/apple/mac/java-mac-native-look/Putting_your_application_na.shtml
    // NOPE javaProperties.put("com.apple.mrj.application.apple.menu.about.name", myAppName)

    javaExtras.put("-splash:\$APP_ROOT/Contents/Resources/splashscreen.jpg", null)

    // list of all options:
    // https://github.com/crotwell/gradle-macappbundle/blob/master/src/main/groovy/edu/sc/seis/macAppBundle/MacAppBundlePluginExtension.groovy
}

task copySplashscreenForMacApp(type: Copy) {
//    println "Copying splash screen for mac app ..."
    from 'src/main/resources/gadsu/splashscreen.jpg'
    into 'build/macApp/' + myAppName + '.app/Contents/Resources'
}
createApp.dependsOn copySplashscreenForMacApp

// =====================================================================================================================
// TEST
// =====================================================================================================================

// run all tests:
// >> gradle test testIt testUi

// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
// http://stackoverflow.com/questions/21009125/including-not-excluding-groups-in-testng-and-gradle
// suite in gradle: http://stackoverflow.com/questions/25774964/gradle-testng-how-to-specify-testng-include-group-in-build-gradle-while-using
test {
    testLogging.showStandardStreams = true
    minHeapSize = "128m"
    maxHeapSize = "512m"

    reports.junitXml.destination = file("${buildDir}/test-results/unit")
    useTestNG() {
        // https://docs.gradle.org/current/groovydoc/org/gradle/api/tasks/testing/testng/TestNGOptions.html
        excludeGroups 'db'

        parallel = 'classes'
        threadCount = 5
    }

    testLogging {
//        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        events "skipped", "failed", "standardError"
        exceptionFormat "full" // default is "short"
    }

//    beforeTest { descriptor ->
//        logger.lifecycle("RUN: " + descriptor)
//    }
//    onOutput { descriptor, event ->
//        logger.lifecycle("[OUT] " + descriptor + " >>> " + event.message)
//    }
}

task testIt(type: Test) {
    systemProperty 'gadsu.hibernate.url', 'jdbc:hsqldb:mem:TestItDb'
    useTestNG() {
        excludeGroups ''
        includeGroups 'it', 'db'
    }
    reports.html.destination = file("${reporting.baseDir}/testIt")
    reports.junitXml.destination = file("${buildDir}/test-results/it")
}

// junit will only pickup UI tests using spec4j (which uses junit infra, as no testng infra found yet...)
task testUi(type: Test) {
    systemProperty 'uispec4j.test.library', 'junit'
    systemProperty 'gadsu.hibernate.url', 'jdbc:hsqldb:mem:TestUiDb'
    systemProperty 'gadsu.hibernate.hbm2ddl', 'create-drop'

    reports.html.destination = file("${reporting.baseDir}/testUi")
    reports.junitXml.destination = file("${buildDir}/test-results/ui")

    // nice to not override: systemProperties.BROWSER = System.getProperty('BROWSER', 'internetExplorer')
    useJUnit()
}

import org.apache.tools.ant.filters.ReplaceTokens

import java.text.SimpleDateFormat


buildscript {
    ext.IS_TRAVIS = new File("/home/travis").exists()

    println "[GADSU] IS_TRAVIS=" + IS_TRAVIS

    ext {
        kotlin_version = '1.1.4'

        spring_version = '4.3.10.RELEASE'
        logback_version = '1.2.3'
        guice_version = '4.1.0'
    }

    ext.kpotDefaultVersion = '1.6'
    if (!IS_TRAVIS) {
        // override the kpot version locally
//        kpotDefaultVersion = 'SNAPSHOT'
    }
    ext.kpot_version = kpotDefaultVersion

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "gradle.plugin.edu.sc.seis:macAppBundle:2.1.1"
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
        classpath 'com.autoscout24.gradle:gradle-todo-plugin:1.0'
    }
}

plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id "org.standardout.versioneye" version "1.4.0"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "http://dl.bintray.com/christophpickl/cpickl"
    }
    maven {
        url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/"
    }
}

// =====================================================================================================================
// MISC
// =====================================================================================================================

ext {
    myMainClassName = 'at.cpickl.gadsu.Gadsu'
    myAppName = 'Gadsu'
}

apply plugin: "kotlin"
apply plugin: "kotlin-noarg"
noArg {
    annotation("at.cpickl.gadsu.KotlinNoArg")
}
apply plugin: 'idea'
apply plugin: 'com.autoscout24.gradle.todo'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

versioneye { }

// =====================================================================================================================
// DEPENDENCIES
// =====================================================================================================================

configurations.all {
    exclude group: "commons-logging", module: "commons-logging"
}

dependencies {

    // MISC
    // -------------------------------------------------------------------------
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    compile "com.github.christophpickl.kpotpourri:common4k:$kpot_version"
    compile "com.github.christophpickl.kpotpourri:swing4k:$kpot_version"

    compile 'joda-time:joda-time:2.9.9'
    compile 'commons-cli:commons-cli:1.4' // parse CLI args
    compile 'com.thoughtworks.xstream:xstream:1.4.10'
    compile 'net.lingala.zip4j:zip4j:1.3.2'

    compile "com.google.inject:guice:$guice_version"
    testCompile "com.google.inject.extensions:guice-grapher:$guice_version"
    compile "com.google.inject.extensions:guice-assistedinject:$guice_version"
    compile 'com.google.guava:guava:23.0' // guice introduces some older version
    compile 'net.ricecode:string-similarity:1.0.0'
    compile 'org.freemarker:freemarker:2.3.25-incubating'

    // DB
    // -------------------------------------------------------------------------
    compile 'org.hsqldb:hsqldb:2.3.3' // hsqldb 2.3.4 leads to the application to hang :-/
    compile "org.springframework:spring-jdbc:$spring_version"
    compile "org.springframework:spring-context-support:$spring_version"
    compile 'org.flywaydb:flyway-core:4.2.0'

    // REPORTING
    compile 'net.sf.jasperreports:jasperreports:6.4.1'
    compile 'com.lowagie:itext:2.1.7'
    // overwrite jasperreports '2.1.7.js5-SNAPSHOT' version (most recent is 4.2.2 though)
    compile 'com.itextpdf:itextpdf:5.5.11' // jasper comes with outdated itext (fortunately got different package name)

    // LOGGING
    // -------------------------------------------------------------------------
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.slf4j:jcl-over-slf4j:1.7.25' // everyone who uses apaches common logging should use this instead
    compile "ch.qos.logback:logback-core:$logback_version"
    compile "ch.qos.logback:logback-classic:$logback_version"

    // GOOGLE
    // -------------------------------------------------------------------------
    compile 'com.google.api-client:google-api-client:1.22.0'
    compile 'com.google.oauth-client:google-oauth-client-jetty:1.22.0'
    compile 'com.google.apis:google-api-services-calendar:v3-rev254-1.22.0'
    compile 'com.google.apis:google-api-services-gmail:v1-rev70-1.22.0'
    compile 'javax.mail:mail:1.4.7'
    compile 'org.apache.pdfbox:pdfbox:2.0.7'

    // TEST
    // -------------------------------------------------------------------------
    testCompile "com.github.christophpickl.kpotpourri:test4k:$kpot_version"
    testCompile 'org.testng:testng:6.10'
    // actually 6.11, but there was some JS lib bug which had been fixed by changing the version
    testCompile 'org.mockito:mockito-core:2.7.19'
    testCompile "com.nhaarman:mockito-kotlin-kt1.1:1.5.0"
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'// testng comes with hamcrest-core 1.1 via junit; must be ABOVE
    testCompile 'org.exparity:hamcrest-bean:1.0.11'
    testCompile 'org.exparity:hamcrest-date:2.0.4'
    testCompile 'com.natpryce:hamkrest:1.4.2.0'
    testCompile(group: 'org.uispec4j', name: 'uispec4j', version: '2.5-RC1', classifier: 'jdk8')
    testCompile 'junit:junit:4.12' // required by spec4j during runtime because of inheritance tree
    testCompile "com.google.inject.extensions:guice-testlib:$guice_version"
    testCompile 'org.jopendocument:jOpenDocument:1.3'
    testCompile 'com.github.kittinunf.fuel:fuel:1.5.0'
}

// =====================================================================================================================
// PACKAGING
// =====================================================================================================================

// $ ./gradlew fatJar
apply plugin: 'eu.appsatori.fatjar'

task loadProjectVersionNumber {
    Properties props = new Properties()
    File propsFile = new File("version.properties")
    props.load(propsFile.newDataInputStream())
    version = props['version']
}

processResources.dependsOn loadProjectVersionNumber

processResources {
    from('src/main/resources') {
        include '**/metainf.properties'
        filter ReplaceTokens, tokens: [
                "application.version": version,
                "built.date"         : new SimpleDateFormat("dd.MM.yyyy HH:mm:ss").format(new Date())
        ]
    }
}


fatJar {
    manifest {
        attributes 'Implementation-Title': 'Gadsu',
                'Implementation-Version': version,
                'Main-Class': myMainClassName, // actually not necessary
                'SplashScreen-Image': "gadsu/splashscreen.jpg",
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version')
    }
}

fatJarPrepareFiles {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
}

// =====================================================================================================================
// PACKAGING MAC
// =====================================================================================================================

// $ ./gradlew createApp -Dgadsu.enableMacBundle=true
// $ ./gradlew createDmg -Dgadsu.enableMacBundle=true

// travis lacks hdiutil binary, so only enabled by explicit sysproperty
if (System.properties.getProperty("gadsu.enableMacBundle") == "true") {
    println "[GADSU] enabling mac bundle"
    apply plugin: 'edu.sc.seis.macAppBundle'

    macAppBundle {
        appName = myAppName
        dmgName = myAppName + "-" + version

        mainClassName = myMainClassName
        icon = "src/main/buildMac/logo.icns"
        jvmVersion = "1.8+"

        javaProperties.put("apple.laf.useScreenMenuBar", "true")
        javaProperties.put("gadsu.isMacApp", "true")
        javaExtras.put("-splash:\$APP_ROOT/Contents/Resources/splashscreen.jpg", null)
    }

    task copySplashscreenForMacApp(type: Copy) {
        from 'src/main/resources/gadsu/splashscreen.jpg'
        into "build/macApp/${myAppName}.app/Contents/Resources"
    }
    createApp.dependsOn copySplashscreenForMacApp
}

// =====================================================================================================================
// TEST
// =====================================================================================================================

// $ ./gradlew test testIt testUi

jacoco {
    toolVersion = "0.7.9"
}

test {
    testLogging.showStandardStreams = false

    reports.junitXml.destination = file("${buildDir}/test-results/unit")
    useTestNG() {
        // only increase thread count for real unit tests (will break HSQLDB enabled tests!!!)
        excludeGroups 'uiTest', 'mTest'
    }

    testLogging {
        events "skipped", "failed", "standardError"
        exceptionFormat "full" // default is "short"
    }
    jacoco {
        append = true
    }
}

task testUi(type: Test) {
    testLogging.showStandardStreams = false

    reports.html.destination = file("${reporting.baseDir}/testUi")
    reports.junitXml.destination = file("${buildDir}/test-results/ui")

    useTestNG() {
        includeGroups 'uiTest'
        excludeGroups 'mTest'
    }
    jacoco {
        append = true
        destinationFile = file("$buildDir/jacoco/test.exec") // same as unit tests :)
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

// =====================================================================================================================
// SITE
// =====================================================================================================================

task site {
    apply plugin: 'com.github.ben-manes.versions'
    dependencyUpdates {
        outputFormatter = "json"
    }
}

site.dependsOn dependencyUpdates

// =====================================================================================================================
// BUILD EXE
// =====================================================================================================================

if (!IS_TRAVIS) {

    task launch4jConfig {
        String config = new File('src/main/buildWin/launch4j.template.xml').getText('UTF-8')
        String winVersion = version
        if (winVersion.contains("-SNAPSHOT")) { // cut off "-SNAPSHOT" from version and add ".0"
            winVersion = winVersion.substring(0, winVersion.length() - "-SNAPSHOT".length()) + ".0"
        } else {
            winVersion = winVersion + ".0"
        }

        config = config.replaceAll("\\(\\(GADSU_ROOT\\)\\)", projectDir.absolutePath.replaceAll("\\\\", "\\\\\\\\"))
        config = config.replaceAll("\\(\\(GADSU_BUILD\\)\\)", buildDir.absolutePath.replaceAll("\\\\", "\\\\\\\\"))
        config = config.replaceAll("\\(\\(GADSU_VERSION\\)\\)", version)
        config = config.replaceAll("\\(\\(GADSU_VERSION_WIN\\)\\)", winVersion)
        if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
            config = config.replaceAll("\\\\", "/")
        }
        if (!buildDir.exists()) {
            buildDir.mkdirs()
        }
        new File(buildDir, 'launch4j.xml').write(config, 'UTF-8')
    }

    task buildExe(type: Exec) {
        String launch4jConfigPath = new File(buildDir, 'launch4j.xml').absolutePath
        if (System.getProperty('os.name').toLowerCase().contains('windows')) {
            commandLine 'cmd', '/c', 'launch4jc.exe ' + launch4jConfigPath
        } else {
            commandLine '/Users/wu/Bin/launch4j/launch4j', launch4jConfigPath
        }
    }

    launch4jConfig.dependsOn loadProjectVersionNumber
    buildExe.dependsOn launch4jConfig
}

// =====================================================================================================================
// MISC
// =====================================================================================================================

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

todo {
    todoPattern = "//[\\t\\s]*(FIXME|TODO) (.*)"
    failIfFound = true
    fileExtensions = ["kt"]
}

task verifyKpotNoSnapshotVersion {
    doFirst {
        if (kpot_version.equals("SNAPSHOT")) {
            throw new Exception("KPotpourri must not be a SNAPSHOT version!")
        }
    }
}

check.dependsOn verifyKpotNoSnapshotVersion

import org.apache.tools.ant.filters.ReplaceTokens

import java.text.SimpleDateFormat



buildscript {
    ext.IS_TRAVIS = new File("/home/travis").exists()

    println "[GADSU] IS_TRAVIS=" + IS_TRAVIS
    ext.kotlin_version = '1.1.4'
    ext.kpot_version = '1.6'

//    ext.kpotDefaultVersion = '1.6'
//    if (!IS_TRAVIS) {
//        kpotDefaultVersion = 'SNAPSHOT' // override the kpot version locally (or not)
    }
//    ext.kpot_version = kpotDefaultVersion

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        // lookup the most recent version here: http://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-gradle-plugin
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "gradle.plugin.edu.sc.seis:macAppBundle:2.1.1"
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
        classpath 'com.autoscout24.gradle:gradle-todo-plugin:1.0'
    }
}

plugins {
    id 'jacoco'
    // version '0.7.6.201602180812', nah: "Plugin 'jacoco' is a core Gradle plugin, which cannot be specified with a version number. Such plugins are versioned as part of Gradle. Please remove the version number from the declaration."
    // solution: jacoco { toolVersion = "0.7.6.201602180812" ...

    // see: https://github.com/kt3k/coveralls-gradle-plugin
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id "org.standardout.versioneye" version "1.4.0"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "http://dl.bintray.com/christophpickl/cpickl"
    }
    maven {
        url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/"
    }
}

// =====================================================================================================================
// MISC
// =====================================================================================================================

versioneye {
    // is it possible to ignore certain dependencies, as i cant fix that?!
}

ext {
    // projectVersion = '1.0.0-SNAPSHOT'
    myMainClassName = 'at.cpickl.gadsu.Gadsu'
    myAppName = 'Gadsu'
}

// version = projectVersion

apply plugin: "kotlin"
//apply plugin: 'kotlin2js'
apply plugin: "kotlin-noarg"
noArg {
    annotation("at.cpickl.gadsu.KotlinNoArg")
}
apply plugin: 'idea'
apply plugin: 'com.autoscout24.gradle.todo'

//defaultTasks 'run'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// =====================================================================================================================
// DEPENDENCIES
// =====================================================================================================================

configurations.all {
    exclude group: "commons-logging", module: "commons-logging"
}

dependencies {

    // MISC
    // -------------------------------------------------------------------------
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    compile "com.github.christophpickl.kpotpourri:common:$kpot_version"
    compile "com.github.christophpickl.kpotpourri:swing:$kpot_version"

    compile 'joda-time:joda-time:2.9.9'
    compile 'commons-cli:commons-cli:1.4' // parse CLI args
    compile 'com.thoughtworks.xstream:xstream:1.4.9'
    compile 'net.lingala.zip4j:zip4j:1.3.2'

    compile 'com.google.inject:guice:4.1.0'
    testCompile 'com.google.inject.extensions:guice-grapher:4.1.0'
    compile 'com.google.inject.extensions:guice-assistedinject:4.1.0'
    compile 'com.google.guava:guava:21.0' // guice comes with 16.0.1
    compile 'net.ricecode:string-similarity:1.0.0'
    compile 'org.freemarker:freemarker:2.3.25-incubating'

    // DB
    // -------------------------------------------------------------------------
    compile 'org.hsqldb:hsqldb:2.3.3' // hsqldb 2.3.4 leads to the application to hang :-/
    compile 'org.springframework:spring-jdbc:4.3.7.RELEASE'
    compile 'org.springframework:spring-context-support:4.3.7.RELEASE'
    compile 'org.flywaydb:flyway-core:4.1.2'

    // REPORTING
    compile 'net.sf.jasperreports:jasperreports:6.4.0'
    compile 'com.lowagie:itext:2.1.7'
    // overwrite jasperreports '2.1.7.js5-SNAPSHOT' version (most recent is 4.2.2 though)
    compile 'com.itextpdf:itextpdf:5.5.11' // jasper comes with outdated itext (fortunately got different package name)

    // LOGGING
    // -------------------------------------------------------------------------
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.slf4j:jcl-over-slf4j:1.7.25' // everyone who uses apaches common logging should use this instead
    compile 'ch.qos.logback:logback-core:1.2.2'
    compile 'ch.qos.logback:logback-classic:1.2.2'

    // GOOGLE
    // -------------------------------------------------------------------------
    compile 'com.google.api-client:google-api-client:1.22.0'
    compile 'com.google.oauth-client:google-oauth-client-jetty:1.22.0'
    compile 'com.google.apis:google-api-services-calendar:v3-rev239-1.22.0'
    compile 'com.google.apis:google-api-services-gmail:v1-rev62-1.22.0'
    compile 'javax.mail:mail:1.4.7'
    compile 'org.apache.pdfbox:pdfbox:2.0.5'

    // TEST
    // -------------------------------------------------------------------------
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'// testng comes with hamcrest-core 1.1 via junit; must be ABOVE
    testCompile 'org.exparity:hamcrest-bean:1.0.11'
    testCompile 'org.exparity:hamcrest-date:2.0.4'
//    testCompile 'com.natpryce:hamkrest:1.2.3.0'
    testCompile('org.testng:testng:6.11')
    testCompile 'org.mockito:mockito-core:2.7.19'
    testCompile(group: 'org.uispec4j', name: 'uispec4j', version: '2.5-RC1', classifier: 'jdk8')
    testCompile 'junit:junit:4.12' // required by spec4j during runtime because of inheritance tree
    testCompile 'com.google.inject.extensions:guice-testlib:4.1.0'

    testCompile 'org.jopendocument:jOpenDocument:1.3'

    testCompile 'com.github.kittinunf.fuel:fuel:1.5.0'
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version" // rest client for kotlin

//    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
//    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

// =====================================================================================================================
// PACKAGING
// =====================================================================================================================

// https://github.com/musketyr/gradle-fatjar-plugin
// ./gradlew fatJar
apply plugin: 'eu.appsatori.fatjar'

task loadProjectVersionNumber {
    Properties props = new Properties()
    File propsFile = new File("version.properties")
    props.load(propsFile.newDataInputStream())
    version = props['version']
    /*
    Integer nextbuildnum = ( ((props.getProperty('artifactBuildNumber')) as BigDecimal) + 1 )
    props.setProperty('artifactBuildNumber', nextbuildnum.toString())
    props.store(propsFile.newWriter(), null)
    props.load(propsFile.newDataInputStream())
    */

}
processResources.dependsOn loadProjectVersionNumber

processResources {
    from('src/main/resources') {
        include '**/metainf.properties'
        filter ReplaceTokens, tokens: [
                "application.version": version,
                "built.date"         : new SimpleDateFormat("dd.MM.yyyy HH:mm:ss").format(new Date())
        ]
    }
}


fatJar {
    manifest {
        // splashscreen-image manifest entry must be in "main JAR" file
        // java -jar is going to ignore -classpath option
        //   => either fat-jar, or reference other lib-jars in manifest
        attributes 'Implementation-Title': 'Gadsu',
                'Implementation-Version': version,
                'Main-Class': myMainClassName, // actually not necessary
                'SplashScreen-Image': "gadsu/splashscreen.jpg",
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version')
    }
    /*
    dependsOn configurations.runtime
    from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    */
}

fatJarPrepareFiles {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
}

// =====================================================================================================================
// PACKAGING MAC
// =====================================================================================================================

// $ gradle createApp -Dgadsu.enableMacBundle=true
// $ gradle createDmg -Dgadsu.enableMacBundle=true

// travis lacks hdiutil binary, so only enabled by explicit sysproperty
if (System.properties.getProperty("gadsu.enableMacBundle") == "true") {
    println "enabling mac bundle"
    // NOPE!
    //apply plugin: 'application'
    //mainClassName = myMainClassName
    // applicationDefaultJvmArgs = ["-Dfoo=bar"]

    // https://github.com/crotwell/gradle-macappbundle
    // https://github.com/crotwell/gradle-macappbundle/wiki/Intro
    apply plugin: 'edu.sc.seis.macAppBundle'

    macAppBundle {
        appName = myAppName
        dmgName = myAppName + "-" + version

        mainClassName = myMainClassName
        icon = "src/main/buildMac/logo.icns"
        jvmVersion = "1.8+"

        javaProperties.put("apple.laf.useScreenMenuBar", "true")
        javaProperties.put("gadsu.isMacApp", "true")

        // http://alvinalexander.com/apple/mac/java-mac-native-look/Putting_your_application_na.shtml
        // NOPE javaProperties.put("com.apple.mrj.application.apple.menu.about.name", myAppName)

        javaExtras.put("-splash:\$APP_ROOT/Contents/Resources/splashscreen.jpg", null)

        // list of all options:
        // https://github.com/crotwell/gradle-macappbundle/blob/master/src/main/groovy/edu/sc/seis/macAppBundle/MacAppBundlePluginExtension.groovy
    }

    // !!!!!!!! THIS MUST NOT BE EQUAL TO: com.sun.org.apache.xalan.internal.xsltc.compiler.Copy !!!!!!!!! exclude from auto-import in intellij
    task copySplashscreenForMacApp(type: Copy) {
        //    println "Copying splash screen for mac app ..."
        from 'src/main/resources/gadsu/splashscreen.jpg'
        into "build/macApp/${myAppName}.app/Contents/Resources"
    }
    createApp.dependsOn copySplashscreenForMacApp
}

// =====================================================================================================================
// TEST
// =====================================================================================================================

// run all tests:
// >> gradle test testIt testUi

jacoco {
    toolVersion = "0.7.9"
}

// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
// http://stackoverflow.com/questions/21009125/including-not-excluding-groups-in-testng-and-gradle
// suite in gradle: http://stackoverflow.com/questions/25774964/gradle-testng-how-to-specify-testng-include-group-in-build-gradle-while-using
test {
    testLogging.showStandardStreams = false
    //minHeapSize = "128m"
    //maxHeapSize = "512m"

    reports.junitXml.destination = file("${buildDir}/test-results/unit")
    useTestNG() {
        // https://docs.gradle.org/current/groovydoc/org/gradle/api/tasks/testing/testng/TestNGOptions.html
        excludeGroups 'uiTest', 'mTest'

        //parallel = 'classes'
        //threadCount = 1 // !!!! only increase thread count for real unit tests (will break HSQLDB enabled tests!!!)
    }

    testLogging {
//        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        events "skipped", "failed", "standardError"
        exceptionFormat "full" // default is "short"
    }
    jacoco {
        append = true
//        destinationFile = file("$buildDir/jacoco/jacocoTest-unit.exec")
//        classDumpFile = file("$buildDir/jacoco/classpathdumps-unit")
    }
//    beforeTest { descriptor ->
//        logger.lifecycle("RUN: " + descriptor)
//    }
//    onOutput { descriptor, event ->
//        logger.lifecycle("[OUT] " + descriptor + " >>> " + event.message)
//    }
}

/*
task testIt(type: Test) {
    useTestNG() {
        excludeGroups ''
        includeGroups 'it', 'db'
    }
    reports.html.destination = file("${reporting.baseDir}/testIt")
    reports.junitXml.destination = file("${buildDir}/test-results/it")
}
*/

// check.dependsOn testUi
task testUi(type: Test) {
    testLogging.showStandardStreams = false
    // systemProperty 'uispec4j.test.library', 'testng'

    reports.html.destination = file("${reporting.baseDir}/testUi")
    reports.junitXml.destination = file("${buildDir}/test-results/ui")

    // nice to not override: systemProperties.BROWSER = System.getProperty('BROWSER', 'internetExplorer')
    useTestNG() {
        includeGroups 'uiTest'
        excludeGroups 'mTest'
        // suites 'src/main/resources/testng.xml'
    }
    jacoco {
        append = true
        destinationFile = file("$buildDir/jacoco/test.exec") // same as unit tests :)
//        destinationFile = file("$buildDir/jacoco/jacocoTest-ui.exec")
//        classDumpFile = file("$buildDir/jacoco/classpathdumps-ui")
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

// =====================================================================================================================
// SITE
// =====================================================================================================================

//if (System.properties.getProperty("gadsu.report") == "true") {
//    compileJava.dependsOn dependencyUpdates
//}
task site {
    apply plugin: 'com.github.ben-manes.versions'
    dependencyUpdates {
        outputFormatter = "json"
    }
}
site.dependsOn dependencyUpdates

// =====================================================================================================================
// BUILD EXE
// =====================================================================================================================

// disable for travis
if (!IS_TRAVIS) {

    task launch4jConfig {
        String config = new File('src/main/buildWin/launch4j.template.xml').getText('UTF-8')
        String winVersion = version
        if (winVersion.contains("-SNAPSHOT")) { // cut off "-SNAPSHOT" from version and add ".0"
            winVersion = winVersion.substring(0, winVersion.length() - "-SNAPSHOT".length()) + ".0"
        } else {
            winVersion = winVersion + ".0"
        }

        config = config.replaceAll("\\(\\(GADSU_ROOT\\)\\)", projectDir.absolutePath.replaceAll("\\\\", "\\\\\\\\"))
        config = config.replaceAll("\\(\\(GADSU_BUILD\\)\\)", buildDir.absolutePath.replaceAll("\\\\", "\\\\\\\\"))
        config = config.replaceAll("\\(\\(GADSU_VERSION\\)\\)", version)
        config = config.replaceAll("\\(\\(GADSU_VERSION_WIN\\)\\)", winVersion)
        if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
            config = config.replaceAll("\\\\", "/")
        }
        if (!buildDir.exists()) {
            buildDir.mkdirs()
        }
        new File(buildDir, 'launch4j.xml').write(config, 'UTF-8')
    }

    task buildExe(type: Exec) {
        String launch4jConfigPath = new File(buildDir, 'launch4j.xml').absolutePath
        if (System.getProperty('os.name').toLowerCase().contains('windows')) {
            // launch4jc.exe src/main/buildWin/launch4j.xml
            commandLine 'cmd', '/c', 'launch4jc.exe ' + launch4jConfigPath
        } else {
            // although launch4j is on the PATH, simply invoking the binary doesnt work...
            commandLine '/Users/wu/Bin/launch4j/launch4j', launch4jConfigPath
        }
    }

    launch4jConfig.dependsOn loadProjectVersionNumber
    buildExe.dependsOn launch4jConfig
    // buildExe.dependsOn fatJar

}

// =====================================================================================================================
// MISC
// =====================================================================================================================

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

todo {
    todoPattern = "//[\\t\\s]*(FIXME|TODO) (.*)"
    failIfFound = true
//    sourceFolder = "src/main/kotlin"
    fileExtensions = ["kt"]
}

task verifyKpotNoSnapshotVersion {
    doFirst {
        if (kpot_version.equals("SNAPSHOT")) {
            throw new Exception("KPotpourri must not be a SNAPSHOT version!")
        }
    }
}

// will be used during release
check.dependsOn verifyKpotNoSnapshotVersion
